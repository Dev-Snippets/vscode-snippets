{
  "tsrrcc": {
    "prefix": "tsrrcc",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux';",
      "import { RouteComponentProps, withRouter } from 'react-router';",
      "",
      "import { UfcState } from '@/apps/shared/ducks';",
      "import * as S from 'ufc-schema';",
      "",
      "import * as styles from './index.less';",
      "",
      "export interface $0Props extends RouteComponentProps {}",
      "",
      "export interface $0State {}",
      "",
      "export class $0Comp extends React.Component<",
      "  $0Props,",
      "  $0State",
      "> {",
      "  constructor(props: $0Props) {",
      "    super(props);",
      "",
      "    this.state = {};",
      "  }",
      "",
      "  render() {",
      "    return <div className={styles.container}>$0</div>;",
      "  }",
      "}",
      "",
      "export const $0 = connect(",
      "  (_state: UfcState) => ({}),",
      "  {},",
      ")(withRouter($0Comp));",
      ""
    ],
    "description": "Class Component with Router & Redux"
  },
  "tsrfc": {
    "prefix": "tsrfc",
    "body": [
      "import cn from 'classnames';",
      "import React from 'react';",
      "",
      "import styles from './index.less';",
      "",
      "export interface $0Props {",
      "  className?: string;",
      "  style?: Record<string, string | number>;",
      "}",
      "",
      "export const $0 = ({",
      "  className,",
      "  style,",
      "}: $0Props) => {",
      "  return (",
      "    <div className={cn(className, styles.container)} style={style}>",
      "      $0",
      "    </div>",
      "  );",
      "};"
    ],
    "description": ""
  },
  "tsrtaro": {
    "prefix": "tsrtaro",
    "body": [
      "import { View } from '@tarojs/components';",
      "import { connect } from '@tarojs/redux';",
      "import Taro, { Component, Config } from '@tarojs/taro';",
      "import { ComponentClass } from 'react';",
      "",
      "import { AppState } from '../../ducks';",
      "",
      "import './index.less';",
      "",
      "// #region 书写注意",
      "//",
      "// 目前 typescript 版本还无法在装饰器模式下将 Props 注入到 Taro.Component 中的 props 属性",
      "// 需要显示声明 connect 的参数类型并通过 interface 的方式指定 Taro.Component 子类的 props",
      "// 这样才能完成类型检查和 IDE 的自动提示",
      "// 使用函数模式则无此限制",
      "// ref: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20796",
      "//",
      "// #endregion",
      "",
      "interface IStoreProps {",
      "}",
      "",
      "interface IDispatchProps {}",
      "",
      "interface IOwnProps {}",
      "",
      "interface IState {",
      "}",
      "",
      "type IProps = IStoreProps & IDispatchProps & IOwnProps;",
      "",
      "interface $0 {",
      "  props: IProps;",
      "}",
      "",
      "@connect((_state: AppState) => ({}), {})",
      "class $0 extends Component<IProps, IState> {",
      "  state: IState = { };",
      "",
      "  componentWillReceiveProps(nextProps) {",
      "    console.log(this.props, nextProps);",
      "  }",
      "",
      "  componentWillUnmount() {}",
      "",
      "  /**",
      "   * 指定config的类型声明为: Taro.Config",
      "   *",
      "   * 由于 typescript 对于 object 类型推导只能推出 Key 的基本类型",
      "   * 对于像 navigationBarTextStyle: 'black' 这样的推导出的类型是 string",
      "   * 提示和声明 navigationBarTextStyle: 'black' | 'white' 类型冲突, 需要显示声明类型",
      "   */",
      "  config: Config = {",
      "    navigationBarTitleText: '在线报价',",
      "  };",
      "",
      "  componentDidShow() {}",
      "",
      "  componentDidHide() {}",
      "",
      "  render() {",
      "    return (",
      "      <View className=\"index\">",
      "        Hello World",
      "      </View>",
      "    );",
      "  }",
      "}",
      "",
      "// #region 导出注意",
      "//",
      "// 经过上面的声明后需要将导出的 Taro.Component 子类修改为子类本身的 props 属性",
      "// 这样在使用这个子类时 Ts 才不会提示缺少 JSX 类型参数错误",
      "//",
      "// #endregion",
      "",
      "export default $0 as ComponentClass<IOwnProps, IState>;",
      ""
    ],
    "description": "tsrtaro"
  }
}
